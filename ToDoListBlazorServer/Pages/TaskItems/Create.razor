@page "/tasks/create"
@inject TaskItemService _taskItemService
@inject NavigationManager _navigationManager
@attribute [Authorize]

<h3>Nova Tarefa</h3>

<EditForm Model = "_model" OnValidSubmit="@HandleSubmitAsync">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="Title" class="forma-label">Título</label>
        <InputText class="form-control" id="Title" @bind-Value="_model.Title" />
    </div>
    <div class="mb-3">
        <label for="Title" class="forma-label">Descrição</label>
        <InputText class="form-control"id="Description" @bind-Value="_model.Description" />
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class=" alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">
        Registrar
    </button>

    <a class="btn btn-secondary" href="/tasks">
        Cancelar
    </a>
        
    
       


</EditForm>





@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    private TaskItem _model = new();
    private string? _errorMessage = null;


    private async Task HandleSubmitAsync()
    {

        var authState = await _authenticationState;
        var userIdString = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var userId = 0;

        if (int.TryParse(userIdString, out userId))
        {
            await _taskItemService.AddAsync(_model, userId);
            await Task.Delay(100);
            _navigationManager.NavigateTo("/tasks");
        }
        else
        {
            _errorMessage = "Usuário não autenticado";
        }

        _navigationManager.NavigateTo("/tasks");


    }

}
