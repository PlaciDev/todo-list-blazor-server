@page "/tasks"
@inject TaskItemService _taskService
@attribute [Authorize]

<h1>Minhas Tarefas</h1>

<a class="btn btn-primary" href="/tasks/create">Nova Tarefa</a>

<table class="table w-100">
  <thead>
      <tr>
            <th>#</th>
            <th>Título</th>
            <th>Descrição</th>
            <th>Status</th>
            <th>Data</th>
            <th></th>
      </tr>
    </thead>
      <tbody>
          @foreach (var task in _taskItems)
            {
                <tr>
                    <td>@task.Id</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@if (task.IsCompleted)
                        {
                            <span>Concluído</span>
                        }
                        else
                        {
                            <span>Pendente</span>
                        }
                    </td>
                    <td>@task.CreatedAt</td>
                    <td>
                        <a class="btn btn-outline-warning" href="/tasks/edit/@task.Id">EDITAR</a>
                        <a class="btn btn-outline-danger" href="/tasks/delete/@task.Id">REMOVER</a>
                        <a class="btn btn-outline-success" href="" @onclick="() => ToggleCompletion(task.Id)"@onclick:preventDefault>CONCLUIR</a>
                    </td>
                        
                </tr>
            }
            </tbody>
  
</table>





@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    private List<TaskItem> _taskItems = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationState;
        var userIdString = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var userIdInt = 0;



        if (int.TryParse(userIdString, out userIdInt))
        {
            _taskItems = await _taskService.GetAllAsync(userIdInt);
        }


        
    }

    private async Task ToggleCompletion(int id)
    {
        await _taskService.ToggleCompletionAsync(id);

        var taskToUpdate = _taskItems.FirstOrDefault(x => x.Id == id);

        if(_taskItems is not null)
        {
            taskToUpdate.IsCompleted = !taskToUpdate.IsCompleted;
        }

        StateHasChanged();
    }

    
}
